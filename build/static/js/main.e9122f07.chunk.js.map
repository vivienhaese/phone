{"version":3,"sources":["model/gql.ts","pages/Details.tsx","components/CallItem.tsx","components/GroupedCallList.tsx","components/LoadingCallList.tsx","pages/Home.tsx","context/reducers.ts","context/context.tsx","pages/Login.tsx","App.tsx","index.tsx"],"names":["CALL","gql","PAGINATED_CALLS","ARCHIVE_CALL","LOGIN","Details","callId","useParams","useQuery","variables","id","loading","data","error","useMutation","onCompleted","archiveCall","console","log","call","onArchiveClicked","useCallback","flexDirection","alignItems","justifyContent","component","direction","CallInboundFilled","CallOutboundFilled","color","size","marginBottom","Typography","variant","from","to","Date","created_at","toLocaleString","Divider","orientation","marginY","notes","length","map","note","content","is_archived","Button","onClick","CallItem","inboundCall","boxShadow","borderRadius","height","width","paddingX","paddingY","cursor","className","opacity","marginRight","textAlign","fontSize","toLocaleTimeString","GroupedCallList","calls","isSelectionActive","selectedCalls","onCallSelected","path","useRouteMatch","groupedCalls","sort","a","b","localeCompare","reduce","groups","date","split","push","sortedDates","Object","keys","toLocaleDateString","Spacer","space","checked","disabled","onChange","activeClassName","LoadingCallList","callNumber","Array","value","index","Home","Types","useState","offset","setOffset","setSelectionActive","setSelectedCalls","limit","paginatedCalls","nodes","hasNextPage","onNextCallsClicked","onPreviousCallsClicked","itemSelectedCount","count","key","forEach","gridTemplateColumns","gridGap","bg","p","exact","authReducer","state","action","type","SignIn","assign","authenticated","SignOut","initialState","auth","AppContext","createContext","dispatch","mainReducer","AppProvider","children","useReducer","Provider","Login","React","useContext","login","payload","username","setUsername","password","setPassword","onLoginClicked","input","pathname","CALLS_PATH","mx","mt","onSubmit","e","preventDefault","gridColumnGap","gridRowGap","label","name","TextFieldInput","placeholder","event","target","readOnly","SpinnerOutlined","spin","LOGIN_PATH","PrivateRoute","isAuthenticated","rest","render","props","createElement","App","Tractor","injectStyle","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","localStorage","getItem","errors","message","operationName","token","access_token","setItem","client","ApolloClient","link","concat","cache","InMemoryCache","version","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"iTAWaA,GARKC,YAAH,gFAQKA,YAAH,oPAkBJC,EAAkBD,YAAH,yUAmBfE,EAAeF,YAAH,qIASZG,EAAQH,YAAH,2M,OC6BHI,MAvEf,WAAoB,IACZC,EAA+BC,cAA/BD,OADW,EAEgBE,YAASR,EAAM,CAC9CS,UAAW,CAAEC,GAAIJ,KADXK,EAFS,EAETA,QAASC,EAFA,EAEAA,KAAMC,EAFN,EAEMA,MAFN,EAKKC,YAAYX,EAAc,CAC9CY,YAD8C,YAChB,IAAhBC,EAAe,EAAfA,YACZC,QAAQC,IAAR,UAAeF,EAAf,sBAFGA,EALU,oBAWXG,EAAU,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAMO,KAGnBC,EAAmBC,uBAAY,WACnCL,EAAY,CACVP,UAAW,CAAEC,GAAIS,EAAKT,QAEvB,CAACM,EAAaG,IAIjB,OAFIN,GAAOI,QAAQC,IAAIP,EAASQ,EAAMN,GAElCF,IAAYQ,EAAa,iDAE3B,eAAC,OAAD,CACEG,cAAc,SACdC,WAAW,SACXC,eAAe,gBAHjB,UAKE,cAAC,OAAD,CACEC,UACqB,YAAnBN,EAAKO,UAA0BC,oBAAoBC,qBAErDC,MAAM,eACNC,KAAM,GACNC,aAAa,SAEf,eAACC,EAAA,EAAD,CAAYC,QAAQ,UAApB,mBAAqCd,EAAKe,QAC1C,eAACF,EAAA,EAAD,CAAYC,QAAQ,UAApB,iBAAmCd,EAAKgB,MACxC,cAACH,EAAA,EAAD,CAAYC,QAAQ,YAApB,SACG,IAAIG,KAAKjB,EAAKkB,YAAYC,mBAG7B,cAACC,EAAA,EAAD,CAASC,YAAY,aAAaV,KAAK,QAAQW,QAAQ,SAEvD,cAACT,EAAA,EAAD,CAAYC,QAAQ,UAAUF,aAAa,MAA3C,mBAGCZ,EAAKuB,MAAMC,OACVxB,EAAKuB,MAAME,KAAI,SAACC,GAAD,OACb,cAACb,EAAA,EAAD,CAAoDC,QAAQ,OAA5D,SACGY,EAAKC,SADR,eAAyB3B,EAAKT,GAA9B,iBAAyCmC,EAAKnC,QAKhD,cAACsB,EAAA,EAAD,CAAYC,QAAQ,YAApB,wCAGF,cAACM,EAAA,EAAD,CAASC,YAAY,aAAaV,KAAK,QAAQW,QAAQ,SAEtDtB,EAAK4B,YACJ,cAACf,EAAA,EAAD,CAAYC,QAAQ,YAApB,2BAEA,cAACe,EAAA,EAAD,CAAQf,QAAQ,UAAUgB,QAAS7B,EAAnC,8B,0BCvBO8B,MAtCf,YAA4C,IAAxB/B,EAAuB,EAAvBA,KACZgC,EAAiC,YAAnBhC,EAAKO,UACzB,OACE,cAAC,MAAD,CACE0B,UAAW,EACXC,aAAc,EACdC,OAAO,OACPC,MAAM,QACNC,SAAS,OACTC,SAAS,MACTC,OAAO,UACPC,UAAU,YACVC,QAASzC,EAAK4B,YAdY,IAcqB,EATjD,SAWE,eAAC,OAAD,CAAMzB,cAAc,MAAMC,WAAW,SAASC,eAAe,aAA7D,UACE,cAAC,OAAD,CACEC,UAAW0B,EAAcxB,oBAAoBC,qBAC7CC,MAAM,eACNgC,YAAY,OACZ/B,KAAM,KAER,eAAC,OAAD,CACER,cAAc,SACdC,WAAW,aACXC,eAAe,aAHjB,UAKE,cAACQ,EAAA,EAAD,CAAY8B,UAAU,OAAtB,SACGX,EAAchC,EAAKe,KAAOf,EAAKgB,KAElC,cAACH,EAAA,EAAD,CAAY8B,UAAU,OAAOjC,MAAM,iBAAiBkC,SAAS,QAA7D,SACG,IAAI3B,KAAKjB,EAAKkB,YAAY2B,gCCmCxBC,MAhEf,YAK0B,IAJxBC,EAIuB,EAJvBA,MACAC,EAGuB,EAHvBA,kBACAC,EAEuB,EAFvBA,cACAC,EACuB,EADvBA,eAEQC,EAASC,cAATD,KACFE,EAAe,YAAIN,GACtBO,MAAK,SAACC,EAAGC,GACR,OAAOA,EAAEtC,WAAWuC,cAAcF,EAAErC,eAErCwC,QAAO,SAACC,EAAQ3D,GACf,IAAM4D,EAAO5D,EAAKkB,WAAW2C,MAAM,KAAK,GAKxC,OAJKF,EAAOC,KACVD,EAAOC,GAAQ,IAEjBD,EAAOC,GAAME,KAAK9D,GACX2D,IACN,IAECI,EAAcC,OAAOC,KAAKZ,GAAcC,MAAK,SAACC,EAAGC,GAAJ,OACjDA,EAAEC,cAAcF,MAGlB,OACE,cAAC,WAAD,UACGQ,EAAYtC,KAAI,SAACmC,GAAD,OACf,eAAC,WAAD,WACE,cAAC/C,EAAA,EAAD,CAAYC,QAAQ,UAAUF,aAAa,MAA3C,SACG,IAAIK,KAAK2C,GAAMM,uBAElB,cAACC,EAAA,EAAD,CAAQ5D,UAAU,WAAW6D,MAAM,KAAnC,SACGf,EAAaO,GAAMnC,KAAI,SAACzB,GAAD,OACtB,eAACmE,EAAA,EAAD,CACE5D,UAAU,aAEV6D,MAAM,KACNhE,WAAW,SAJb,UAMG4C,EACC,cAAC,WAAD,CACEqB,UAAWpB,EAAcjD,EAAKT,IAC9B+E,SAAUtE,EAAK4B,YACfrC,GAAE,6BAAwBS,EAAKT,IAC/BgF,SAAU,SAACF,GACTnB,EAAe,2BACVD,GADS,kBAEXjD,EAAKT,GAAK8E,QAIf,KACJ,cAAC,IAAD,CAASrD,GAAE,UAAKmC,EAAL,YAAanD,EAAKT,IAAMiF,gBAAiB,WAApD,SACE,cAAC,EAAD,CAAUxE,KAAMA,QApBpB,uBAEuBA,EAAKT,YARlC,wBAAgCqE,UC1BzBa,MAXf,YAAgE,IAArCC,EAAoC,EAApCA,WACzB,OACE,eAACP,EAAA,EAAD,CAAQ5D,UAAU,WAAW6D,MAAM,IAAI/D,eAAe,aAAtD,UACE,cAAC,WAAD,CAAU+B,MAAO,IAAKD,OAAQ,KAC7BwC,MAAM5D,KAAK4D,MAAMD,GAAYT,QAAQxC,KAAI,SAACmD,EAAOC,GAAR,OACxC,cAAC,WAAD,CAA4CzC,MAAO,IAAKD,OAAQ,IAAhE,2BAAmC0C,WC+I5BC,IC1JHC,ED0JGD,EA3If,WAAiB,IAAD,IACN3B,EAASC,cAATD,KADM,EAEc6B,mBAAS,GAFvB,mBAEPC,EAFO,KAECC,EAFD,OAGkCF,oBAAS,GAH3C,mBAGPhC,EAHO,KAGYmC,EAHZ,OAI4BH,mBAAwB,IAJpD,mBAIP/B,EAJO,KAIQmC,EAJR,OAOY/F,YAASN,EAAiB,CAClDO,UAAW,CAAE2F,SAAQI,MAVX,MASJ7F,EAPM,EAONA,QAASC,EAPH,EAOGA,KAKXsD,GAAoB,OAAJtD,QAAI,IAAJA,GAAA,UAAAA,EAAM6F,sBAAN,eAAsBC,QAAS,GAG/CC,GAA2B,OAAJ/F,QAAI,IAAJA,GAAA,UAAAA,EAAM6F,sBAAN,eAAsBE,eAAe,EAC5DC,EAAqBvF,uBAAY,WACrCgF,EAAUD,EAnBA,MAoBT,CAACA,IACES,EAAyBxF,uBAAY,WACzCgF,EAAUD,EAtBA,MAuBT,CAACA,IAGEU,EAAoB3B,OAAOC,KAAKhB,GAAeS,QAAO,SAACkC,EAAOC,GAClE,OAAOD,GAAS3C,EAAc4C,GAAO,EAAI,KACxC,GA1BW,EA6BQlG,YAAYX,EAAc,CAC9CY,YAD8C,YAChB,IAAhBC,EAAe,EAAfA,YACZC,QAAQC,IAAR,UAAeF,EAAf,sBAFGA,EA7BO,oBAoCRI,EAAmBC,uBAAY,WACnC8D,OAAOC,KAAKhB,GAAe6C,SAAQ,SAACvG,GAC9B0D,EAAc1D,IAChBM,EAAY,CACVP,UAAW,CAAEC,WAKnB6F,EAAiB,IACjBD,GAAmB,KAClB,CAACtF,EAAaoD,IAEjB,OACE,eAAC,OAAD,CAAM8C,oBAAoB,mBAAmBC,QAAS,EAAtD,UACE,cAAC,OAAD,CACEC,GAAG,aACH7F,WAAW,SACXC,eAAe,SACf+B,MAAM,QACN8D,EAAG,EALL,SAOE,eAAC/B,EAAA,EAAD,CAAQ5D,UAAU,WAAW6D,MAAM,IAAI/D,eAAe,SAAtD,UACE,eAAC,OAAD,CACEF,cAAc,MACdE,eAAe,gBACfD,WAAW,SAHb,UAKE,cAACS,EAAA,EAAD,CAAYC,QAAQ,WAApB,mBACA,cAACe,EAAA,EAAD,CACElB,KAAK,SACLmB,QAAS,WACHkB,GACFoC,EAAiB,IAEnBD,GAAoBnC,IANxB,SASGA,EAAoB,SAAW,oBAIpC,cAAC,OAAD,CAAM3C,eAAe,SAArB,SACG2C,EACC2C,EACE,eAAC9D,EAAA,EAAD,CACEf,QAAQ,UACRH,KAAK,SACLmB,QAAS7B,EAHX,qBAKW0F,EAAoB,IACN,IAAtBA,EAA0B,OAAS,WAGtC,cAAC9E,EAAA,EAAD,kDAEA,OAGLrB,EAEC,cAAC,EAAD,CAAiBkF,WAAY,KAG7B,cAAC,EAAD,CACE3B,MAAOA,EACPC,kBAAmBA,EACnBC,cAAeA,EACfC,eAAgB,SAACD,GAAD,OACdmC,EAAiBnC,MAKvB,eAAC,OAAD,CAAM9C,cAAc,MAAME,eAAe,gBAAzC,UACc,IAAX4E,EACC,cAACpD,EAAA,EAAD,CAAQC,QAAS4D,EAAjB,sBAEA,cAAC,OAAD,IAEDF,EACC,cAAC3D,EAAA,EAAD,CAAQC,QAAS2D,EAAjB,kBAEA,cAAC,OAAD,YAMR,cAAC,OAAD,CAAMrF,WAAW,SAASC,eAAe,SAAS6F,EAAG,EAArD,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAAChD,KAAMA,EAAnB,SACE,kEAEF,cAAC,IAAD,CAAOA,KAAI,UAAKA,EAAL,YAAX,SACE,cAAC,EAAD,e,mBClJA4B,K,iBAAAA,E,oBAAAA,M,KAWL,IAaMqB,EAAc,SAACC,EAAiBC,GAC3C,OAAQA,EAAOC,MACb,KAAKxB,EAAMyB,OACT,OAAOxC,OAAOyC,OAAO,GAAIJ,EAAO,CAC9BK,eAAe,IAEnB,KAAK3B,EAAM4B,QACT,OAAO3C,OAAOyC,OAAO,GAAIJ,EAAO,CAC9BK,eAAe,IAEnB,QACE,OAAOL,ICjBPO,EAAiC,CACrCC,KDRwC,CAExCH,eAAe,ICSXI,EAAaC,wBAGhB,CACDV,MAAOO,EACPI,SAAU,kBAAM,QAIZC,EAAc,SAAC,EAA4BX,GAAyB,IAAnDO,EAAkD,EAAlDA,KACrB,MAAO,CACLA,KAAMT,EAAYS,EAAMP,KAKtBY,EAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACpBC,qBAAWH,EAAaL,GADJ,mBACvCP,EADuC,KAChCW,EADgC,KAE9C,OACE,cAACF,EAAWO,SAAZ,CAAqBzC,MAAO,CAAEyB,QAAOW,YAArC,SACGG,KCyCQG,MAnEf,WAAkB,IAAD,EACaC,IAAMC,WAAWV,GAArCT,EADO,EACPA,MAAOW,EADA,EACAA,SADA,EAEcrH,YAAYV,EAAO,CAC9CW,YAD8C,YACvB,EAAT6H,MACZT,EAAS,CAAET,KAAMxB,EAAMyB,OAAQkB,QAAS,QAJ7B,mBAERD,EAFQ,KAECjI,EAFD,KAECA,QAFD,EASiBwF,mBAAS,IAT1B,mBASR2C,EATQ,KASEC,EATF,OAUiB5C,mBAAS,IAV1B,mBAUR6C,EAVQ,KAUEC,EAVF,KAaTC,EAAiB7H,uBAAY,WAEjCuH,EAAM,CACJnI,UAAW,CAAE0I,MAAO,CAAEL,WAAUE,iBAEjC,CAACA,EAAUF,EAAUF,IAGxB,OAAIpB,EAAMQ,KAAKH,cACN,cAAC,IAAD,CAAU1F,GAAI,CAAEiH,SAAUC,KAIjC,cAAC,MAAD,CAAK9F,MAAM,QAAQ+F,GAAG,OAAOC,GAAG,OAAhC,SACE,cAAC,OAAD,CACEC,SAAU,SAACC,GACTA,EAAEC,kBAFN,SAKE,eAAC,OAAD,CAAMC,cAAe,EAAGC,WAAY,EAAG1C,oBAAoB,MAA3D,UACE,cAAC,WAAD,CAAU2C,MAAM,WAAWC,KAAK,WAAhC,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,uBACZjE,MAAO+C,EACPpD,SAAU,SAACuE,GAAD,OAAWlB,EAAYkB,EAAMC,OAAOnE,YAGlD,cAAC,WAAD,CAAU8D,MAAM,WAAWC,KAAK,WAAhC,SACE,cAACC,EAAA,EAAD,CACErC,KAAK,WACL3B,MAAOiD,EACPtD,SAAU,SAACuE,GAAD,OAAWhB,EAAYgB,EAAMC,OAAOnE,YAGlD,cAAC,WAAD,UACGpF,EACC,eAACqC,EAAA,EAAD,CAAQmH,UAAQ,EAAhB,UACE,cAAC,OAAD,CAAM1I,UAAW2I,kBAAiBC,MAAI,IADxC,cAIA,cAACrH,EAAA,EAAD,CACEyC,UAAWqD,EAASnG,SAAWqG,EAASrG,OACxCM,QAASiG,EAFX,8BChEDoB,EAAa,SACbjB,EAAa,SAEpBkB,EAAe,SAAC,GAAkD,IAAhD9I,EAA+C,EAA/CA,UAAW+I,EAAoC,EAApCA,gBAAoBC,EAAgB,+CAOrE,OAAO,cAAC,IAAD,2BAAWA,GAAX,IAAiBC,OAND,SAACC,GAAD,OACrBH,EACE9B,IAAMkC,cAAcnJ,EAAWkJ,GAE/B,cAAC,IAAD,CAAUxI,GAAI,CAAEiH,SAAUkB,UAuBjBO,EAlBH,WAAO,IACTrD,EAAUkB,IAAMC,WAAWV,GAA3BT,MAER,OACE,cAACsD,EAAA,EAAD,CAASC,aAAW,EAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOzD,OAAK,EAAChD,KAAMgG,EAAY7I,UAAWgH,IAC1C,cAAC,EAAD,CACEnE,KAAM+E,EACNmB,gBAAiBhD,EAAMQ,KAAKH,cAC5BpG,UAAWwE,IAEb,cAAC,IAAD,CAAOyE,OAAQ,kBAAM,cAAC,IAAD,CAAUvI,GAAIkH,a,wDCdrC2B,GAAW,IAAIC,IAAS,CAC5BC,IAAK,iDAGDC,GAAiB,IAAIC,KAAW,SAACC,EAAWC,GAQhD,OAPAD,EAAUE,YAAW,oBAAGC,eAAH,MAAa,GAAb,QAAuB,CAC1CA,QAAQ,2BACHA,GADE,IAELC,cAAe,UAAYC,aAAaC,QAAQ,WAAY,QAIzDL,EAAQD,GAAWzI,KAAI,SAAChC,GAAU,IAAD,EAItC,IAHI,UAAAA,EAAKgL,cAAL,eAAajJ,SAAqC,iBAA3B/B,EAAKgL,OAAO,GAAGC,SACxC5K,QAAQC,IAAI,mDAEkB,UAA5BmK,EAAUS,cAA2B,CAAC,IAAD,IACjCC,EAAK,UAAInL,EAAKA,YAAT,iBAAG,EAAiCgI,aAApC,aAAG,EAAwCoD,aACtD/K,QAAQC,IAAR,yBAA8B6K,IAC9BL,aAAaO,QAAQ,QAASF,GAEhC,OAAOnL,QAILsL,GAAS,IAAIC,IAAa,CAC9BC,KAAMC,aAAOlB,GAAgBH,IAC7BsB,MAAO,IAAIC,KACXzC,KAAM,gBACN0C,QAAS,QAGXC,IAAS/B,OACP,cAAC,IAAMgC,WAAP,UACE,cAACC,GAAA,EAAD,CAAgBT,OAAQA,GAAxB,SACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,YAKRU,SAASC,eAAe,W","file":"static/js/main.e9122f07.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\n// Queries\nexport const ME = gql`\n  query Me {\n    me {\n      username\n    }\n  }\n`;\n\nexport const CALL = gql`\n  query Call($id: ID!) {\n    call(id: $id) {\n      id\n      direction\n      from\n      to\n      is_archived\n      created_at\n      call_type\n      notes {\n        id\n        content\n      }\n    }\n  }\n`;\n\nexport const PAGINATED_CALLS = gql`\n  query PaginatedCalls($offset: Float, $limit: Float) {\n    paginatedCalls(offset: $offset, limit: $limit) {\n      nodes {\n        id\n        direction\n        from\n        to\n        is_archived\n        created_at\n        call_type\n      }\n      totalCount\n      hasNextPage\n    }\n  }\n`;\n\n// Mutations\nexport const ARCHIVE_CALL = gql`\n  mutation ArchiveCall($id: ID!) {\n    archiveCall(id: $id) {\n      id\n      is_archived\n    }\n  }\n`;\n\nexport const LOGIN = gql`\n  mutation Login($input: LoginInput!) {\n    login(input: $input) {\n      access_token\n      refresh_token\n      user {\n        id\n        username\n      }\n    }\n  }\n`;\n","import React, { useCallback } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Call } from \"../model/models\";\nimport {\n  Button,\n  CallInboundFilled,\n  CallOutboundFilled,\n  Divider,\n  Flex,\n  Icon,\n  Typography,\n} from \"@aircall/tractor\";\nimport { ARCHIVE_CALL, CALL } from \"../model/gql\";\n\nfunction Details() {\n  let { callId }: { callId: string } = useParams();\n  const { loading, data, error } = useQuery(CALL, {\n    variables: { id: callId },\n  });\n  const [archiveCall] = useMutation(ARCHIVE_CALL, {\n    onCompleted({ archiveCall }) {\n      console.log(`${archiveCall} call archived`);\n    },\n  });\n\n  const call: Call = data?.call;\n\n  // Component events\n  const onArchiveClicked = useCallback(() => {\n    archiveCall({\n      variables: { id: call.id },\n    });\n  }, [archiveCall, call]);\n\n  if (error) console.log(loading, call, error);\n  // Loading state\n  if (loading || !call) return <h4>Loading call...</h4>;\n  return (\n    <Flex\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Icon\n        component={\n          call.direction === \"inbound\" ? CallInboundFilled : CallOutboundFilled\n        }\n        color=\"primary.base\"\n        size={60}\n        marginBottom=\"12px\"\n      />\n      <Typography variant=\"heading\">From: {call.from}</Typography>\n      <Typography variant=\"heading\">To: {call.to}</Typography>\n      <Typography variant=\"overline2\">\n        {new Date(call.created_at).toLocaleString()}\n      </Typography>\n\n      <Divider orientation=\"horizontal\" size=\"small\" marginY=\"20px\"></Divider>\n\n      <Typography variant=\"heading\" marginBottom=\"6px\">\n        Notes\n      </Typography>\n      {call.notes.length ? (\n        call.notes.map((note) => (\n          <Typography key={`call_${call.id}_note_${note.id}`} variant=\"body\">\n            {note.content}\n          </Typography>\n        ))\n      ) : (\n        <Typography variant=\"overline2\">Aucune note pour le moment</Typography>\n      )}\n\n      <Divider orientation=\"horizontal\" size=\"small\" marginY=\"20px\"></Divider>\n\n      {call.is_archived ? (\n        <Typography variant=\"overline2\">Call archived</Typography>\n      ) : (\n        <Button variant=\"warning\" onClick={onArchiveClicked}>\n          Archive call\n        </Button>\n      )}\n    </Flex>\n  );\n}\n\nexport default Details;\n","import React from \"react\";\nimport {\n  Box,\n  CallInboundFilled,\n  CallOutboundFilled,\n  Flex,\n  Icon,\n  Typography,\n} from \"@aircall/tractor\";\nimport { Call } from \"../model/models\";\n\ntype CallItemProps = {\n  call: Call;\n};\n\nexport const ARCHIVED_OPACITY = 0.35;\n\nfunction CallItem({ call }: CallItemProps) {\n  const inboundCall = call.direction === \"inbound\";\n  return (\n    <Box\n      boxShadow={1}\n      borderRadius={8}\n      height=\"50px\"\n      width=\"250px\"\n      paddingX=\"12px\"\n      paddingY=\"6px\"\n      cursor=\"pointer\"\n      className=\"call-item\"\n      opacity={call.is_archived ? ARCHIVED_OPACITY : 1}\n    >\n      <Flex flexDirection=\"row\" alignItems=\"center\" justifyContent=\"flex-start\">\n        <Icon\n          component={inboundCall ? CallInboundFilled : CallOutboundFilled}\n          color=\"primary.base\"\n          marginRight=\"12px\"\n          size={36}\n        />\n        <Flex\n          flexDirection=\"column\"\n          alignItems=\"flex-start\"\n          justifyContent=\"flex-start\"\n        >\n          <Typography textAlign=\"left\">\n            {inboundCall ? call.from : call.to}\n          </Typography>\n          <Typography textAlign=\"left\" color=\"secondary.base\" fontSize=\".85em\">\n            {new Date(call.created_at).toLocaleTimeString()}\n          </Typography>\n        </Flex>\n      </Flex>\n    </Box>\n  );\n}\n\nexport default CallItem;\n","import { Checkbox, Spacer, Typography } from \"@aircall/tractor\";\nimport { Fragment } from \"react\";\nimport { NavLink, useRouteMatch } from \"react-router-dom\";\nimport { Call } from \"../model/models\";\nimport { SelectedCalls } from \"../pages/Home\";\nimport CallItem from \"./CallItem\";\n\ntype GroupedCalls = {\n  [key: string]: Call[];\n};\n\ntype GroupedCallListProps = {\n  calls: Call[];\n  isSelectionActive: boolean;\n  selectedCalls: SelectedCalls;\n  onCallSelected: (selectedCalls: SelectedCalls) => void;\n};\n\nfunction GroupedCallList({\n  calls,\n  isSelectionActive,\n  selectedCalls,\n  onCallSelected,\n}: GroupedCallListProps) {\n  const { path } = useRouteMatch();\n  const groupedCalls = [...calls]\n    .sort((a, b) => {\n      return b.created_at.localeCompare(a.created_at);\n    })\n    .reduce((groups, call) => {\n      const date = call.created_at.split(\"T\")[0];\n      if (!groups[date]) {\n        groups[date] = [];\n      }\n      groups[date].push(call);\n      return groups;\n    }, {} as GroupedCalls);\n\n  const sortedDates = Object.keys(groupedCalls).sort((a, b) =>\n    b.localeCompare(a)\n  );\n\n  return (\n    <Fragment>\n      {sortedDates.map((date) => (\n        <Fragment key={`datesListItem_${date}`}>\n          <Typography variant=\"caption\" marginBottom=\"4px\">\n            {new Date(date).toLocaleDateString()}\n          </Typography>\n          <Spacer direction=\"vertical\" space=\"xs\">\n            {groupedCalls[date].map((call) => (\n              <Spacer\n                direction=\"horizontal\"\n                key={`callListItem_${call.id}`}\n                space=\"xs\"\n                alignItems=\"center\"\n              >\n                {isSelectionActive ? (\n                  <Checkbox\n                    checked={!!selectedCalls[call.id]}\n                    disabled={call.is_archived}\n                    id={`selectCallCheckbox_${call.id}`}\n                    onChange={(checked) => {\n                      onCallSelected({\n                        ...selectedCalls,\n                        [call.id]: checked,\n                      });\n                    }}\n                  ></Checkbox>\n                ) : null}\n                <NavLink to={`${path}/${call.id}`} activeClassName={\"selected\"}>\n                  <CallItem call={call}></CallItem>\n                </NavLink>\n              </Spacer>\n            ))}\n          </Spacer>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n}\n\nexport default GroupedCallList;\n","import { Skeleton, Spacer } from \"@aircall/tractor\";\n\ntype LoadingCallListProps = {\n  callNumber: number;\n};\n\nexport const ARCHIVED_OPACITY = 0.35;\n\nfunction LoadingCallList({ callNumber }: LoadingCallListProps) {\n  return (\n    <Spacer direction=\"vertical\" space=\"s\" justifyContent=\"flex-start\">\n      <Skeleton width={128} height={24} />\n      {Array.from(Array(callNumber).keys()).map((value, index) => (\n        <Skeleton key={`callListSkeleton_${index}`} width={250} height={50} />\n      ))}\n    </Spacer>\n  );\n}\n\nexport default LoadingCallList;\n","import React, { useCallback, useState } from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport Details from \"./Details\";\nimport { Call, ID } from \"../model/models\";\nimport { Button, Flex, Grid, Spacer, Typography } from \"@aircall/tractor\";\nimport GroupedCallList from \"../components/GroupedCallList\";\nimport { ARCHIVE_CALL, PAGINATED_CALLS } from \"../model/gql\";\nimport LoadingCallList from \"../components/LoadingCallList\";\n\nexport type SelectedCalls = {\n  [key: ID]: boolean;\n};\n\nconst LIMIT = 10;\n\nfunction Home() {\n  const { path } = useRouteMatch();\n  const [offset, setOffset] = useState(0);\n  const [isSelectionActive, setSelectionActive] = useState(false);\n  const [selectedCalls, setSelectedCalls] = useState<SelectedCalls>({});\n\n  // Load calls\n  const { loading, data } = useQuery(PAGINATED_CALLS, {\n    variables: { offset, limit: LIMIT },\n  });\n\n  // grouped Calls\n  const calls: Call[] = data?.paginatedCalls?.nodes || [];\n\n  // Pagination\n  const hasNextPage: boolean = data?.paginatedCalls?.hasNextPage || false;\n  const onNextCallsClicked = useCallback(() => {\n    setOffset(offset + LIMIT);\n  }, [offset]);\n  const onPreviousCallsClicked = useCallback(() => {\n    setOffset(offset - LIMIT);\n  }, [offset]);\n\n  // Selection status\n  const itemSelectedCount = Object.keys(selectedCalls).reduce((count, key) => {\n    return count + (selectedCalls[key] ? 1 : 0);\n  }, 0);\n\n  // Archive multiple calls\n  const [archiveCall] = useMutation(ARCHIVE_CALL, {\n    onCompleted({ archiveCall }) {\n      console.log(`${archiveCall} call archived`);\n    },\n  });\n\n  // Component events\n  const onArchiveClicked = useCallback(() => {\n    Object.keys(selectedCalls).forEach((id) => {\n      if (selectedCalls[id]) {\n        archiveCall({\n          variables: { id },\n        });\n      }\n    });\n    // Clean selection\n    setSelectedCalls({});\n    setSelectionActive(false);\n  }, [archiveCall, selectedCalls]);\n\n  return (\n    <Grid gridTemplateColumns=\"max-content auto\" gridGap={3}>\n      <Flex\n        bg=\"base.white\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        width=\"300px\"\n        p={3}\n      >\n        <Spacer direction=\"vertical\" space=\"s\" justifyContent=\"center\">\n          <Flex\n            flexDirection=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Typography variant=\"displayM\">Calls</Typography>\n            <Button\n              size=\"xSmall\"\n              onClick={() => {\n                if (isSelectionActive) {\n                  setSelectedCalls({});\n                }\n                setSelectionActive(!isSelectionActive);\n              }}\n            >\n              {isSelectionActive ? \"Cancel\" : \"Select calls\"}\n            </Button>\n          </Flex>\n\n          <Flex justifyContent=\"center\">\n            {isSelectionActive ? (\n              itemSelectedCount ? (\n                <Button\n                  variant=\"warning\"\n                  size=\"xSmall\"\n                  onClick={onArchiveClicked}\n                >\n                  Archive {itemSelectedCount + \" \"}\n                  {itemSelectedCount === 1 ? \"call\" : \"calls\"}\n                </Button>\n              ) : (\n                <Typography>Select at least one call to archive</Typography>\n              )\n            ) : null}\n          </Flex>\n\n          {loading ? (\n            // Calls not loaded yet, display a date and X skeletons while user waits\n            <LoadingCallList callNumber={10}></LoadingCallList>\n          ) : (\n            // Calls loaded, display calls by dates\n            <GroupedCallList\n              calls={calls}\n              isSelectionActive={isSelectionActive}\n              selectedCalls={selectedCalls}\n              onCallSelected={(selectedCalls) =>\n                setSelectedCalls(selectedCalls)\n              }\n            ></GroupedCallList>\n          )}\n\n          <Flex flexDirection=\"row\" justifyContent=\"space-between\">\n            {offset !== 0 ? (\n              <Button onClick={onPreviousCallsClicked}>Previous</Button>\n            ) : (\n              <Flex></Flex>\n            )}\n            {hasNextPage ? (\n              <Button onClick={onNextCallsClicked}>Next</Button>\n            ) : (\n              <Flex></Flex>\n            )}\n          </Flex>\n        </Spacer>\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\" p={3}>\n        <Switch>\n          <Route exact path={path}>\n            <h4>Select a call to view details.</h4>\n          </Route>\n          <Route path={`${path}/:callId`}>\n            <Details></Details>\n          </Route>\n        </Switch>\n      </Flex>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import type { ActionMap } from \"./context\";\n\nexport enum Types {\n  SignIn = \"SIGN_IN\",\n  SignOut = \"SIGN_OUT\",\n}\n\n// Auth state definition\nexport type AuthType = {\n  authenticated: boolean;\n};\n\n// Auth state initial value\nexport const authInitialState: AuthType = {\n  // todo: check if token has expired\n  authenticated: false,\n};\n\n// Auth state available dispatch methods\ntype AuthPayload = {\n  [Types.SignIn]: {};\n  [Types.SignOut]: {};\n};\nexport type AuthActions = ActionMap<AuthPayload>[keyof ActionMap<AuthPayload>];\n\n// ... finally, auth reducer !\nexport const authReducer = (state: AuthType, action: AuthActions): AuthType => {\n  switch (action.type) {\n    case Types.SignIn:\n      return Object.assign({}, state, {\n        authenticated: true,\n      });\n    case Types.SignOut:\n      return Object.assign({}, state, {\n        authenticated: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer, Dispatch } from \"react\";\nimport { authReducer, AuthActions, authInitialState } from \"./reducers\";\nimport type { AuthType } from \"./reducers\";\nexport type ActionMap<M extends { [index: string]: any }> = {\n  [Key in keyof M]: M[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: M[Key];\n      };\n};\n\n// Two contexts (states management) available\ntype InitialStateType = {\n  auth: AuthType; // User, conf, etc...\n};\n\n// Configure an initial state to easily onboard new users\nconst initialState: InitialStateType = {\n  auth: authInitialState,\n};\n\nconst AppContext = createContext<{\n  state: InitialStateType;\n  dispatch: Dispatch<AuthActions>;\n}>({\n  state: initialState,\n  dispatch: () => null,\n});\n\n// Main reducer contains the two contexts\nconst mainReducer = ({ auth }: InitialStateType, action: AuthActions) => {\n  return {\n    auth: authReducer(auth, action),\n  };\n};\n\n// This component will wrap the entire app, to distribute the context in every child components\nconst AppProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport { AppProvider, AppContext };\n","import React, { useCallback, useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport {\n  Box,\n  Button,\n  Form,\n  FormItem,\n  Grid,\n  Icon,\n  SpinnerOutlined,\n  TextFieldInput,\n} from \"@aircall/tractor\";\nimport { AppContext } from \"../context/context\";\nimport { Types } from \"../context/reducers\";\nimport { Redirect } from \"react-router\";\nimport { CALLS_PATH } from \"../App\";\nimport { LOGIN } from \"../model/gql\";\n\nfunction Login() {\n  const { state, dispatch } = React.useContext(AppContext);\n  const [login, { loading }] = useMutation(LOGIN, {\n    onCompleted({ login }) {\n      dispatch({ type: Types.SignIn, payload: {} });\n    },\n  });\n\n  // Local state\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // Component events\n  const onLoginClicked = useCallback(() => {\n    // todo: add controls on username/password\n    login({\n      variables: { input: { username, password } },\n    });\n  }, [password, username, login]);\n\n  // User authenticated, redirect to home page\n  if (state.auth.authenticated) {\n    return <Redirect to={{ pathname: CALLS_PATH }}></Redirect>;\n  }\n\n  return (\n    <Box width=\"400px\" mx=\"auto\" mt=\"20vh\">\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <Grid gridColumnGap={4} gridRowGap={5} gridTemplateColumns=\"1fr\">\n          <FormItem label=\"Username\" name=\"username\">\n            <TextFieldInput\n              placeholder=\"john.doe@example.com\"\n              value={username}\n              onChange={(event) => setUsername(event.target.value)}\n            />\n          </FormItem>\n          <FormItem label=\"Password\" name=\"password\">\n            <TextFieldInput\n              type=\"password\"\n              value={password}\n              onChange={(event) => setPassword(event.target.value)}\n            />\n          </FormItem>\n          <FormItem>\n            {loading ? (\n              <Button readOnly>\n                <Icon component={SpinnerOutlined} spin /> Loading\n              </Button>\n            ) : (\n              <Button\n                disabled={!username.length || !password.length}\n                onClick={onLoginClicked}\n              >\n                Log in\n              </Button>\n            )}\n          </FormItem>\n        </Grid>\n      </Form>\n    </Box>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Tractor } from \"@aircall/tractor\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport { AppContext } from \"./context/context\";\n\nexport const LOGIN_PATH = \"/login\";\nexport const CALLS_PATH = \"/calls\";\n\nconst PrivateRoute = ({ component, isAuthenticated, ...rest }: any) => {\n  const routeComponent = (props: any) =>\n    isAuthenticated ? (\n      React.createElement(component, props)\n    ) : (\n      <Redirect to={{ pathname: LOGIN_PATH }} />\n    );\n  return <Route {...rest} render={routeComponent} />;\n};\n\nconst App = () => {\n  const { state } = React.useContext(AppContext);\n\n  return (\n    <Tractor injectStyle>\n      <Switch>\n        <Route exact path={LOGIN_PATH} component={Login}></Route>\n        <PrivateRoute\n          path={CALLS_PATH}\n          isAuthenticated={state.auth.authenticated}\n          component={Home}\n        ></PrivateRoute>\n        <Route render={() => <Redirect to={CALLS_PATH} />} />\n      </Switch>\n    </Tractor>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  ApolloLink,\n  concat,\n} from \"@apollo/client\";\nimport { AppProvider } from \"./context/context\";\nimport { AuthResponseType } from \"./model/models\";\n\nconst httpLink = new HttpLink({\n  uri: \"https://frontend-test-api.aircall.io/graphql\",\n});\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  operation.setContext(({ headers = {} }) => ({\n    headers: {\n      ...headers,\n      authorization: \"Bearer \" + localStorage.getItem(\"token\") || null,\n    },\n  }));\n  // Todo: refresh token and expired token\n  return forward(operation).map((data) => {\n    if (data.errors?.length && data.errors[0].message === \"Unauthorized\") {\n      console.log(\"Handle unauthorized response, redirect to login\");\n    }\n    if (operation.operationName === \"Login\") {\n      const token = (data.data as AuthResponseType)?.login?.access_token;\n      console.log(`Token received ${token}`);\n      localStorage.setItem(\"token\", token);\n    }\n    return data;\n  });\n});\n\nconst client = new ApolloClient({\n  link: concat(authMiddleware, httpLink),\n  cache: new InMemoryCache(),\n  name: \"vhAircallTest\",\n  version: \"1.0\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <AppProvider>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </AppProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}